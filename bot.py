from telethon.sync import TelegramClient, events
import asyncio
import g4f
from telethon.sync import TelegramClient, events
from g4f.client import Client
import openai
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

TARGET_GROUPS = [1346340387,1325827931,1900280237,]
API_TOKEN = '7526226887:AAG7r_OMhWoT5OBUuk7X-8TZ87laQaLEPkY'
OPENAI_API_KEY = '42d516ee05fa42e08ce6497e5e40c161'
MODEL = "gpt-3.5-turbo"
PROVIDER = g4f.Provider.You
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

system_content = """
Rules:
Always Follow the instance
Only result.
No comments!
No parse mode!
Improve th post	
Lang targets:
Russian-Ru,
Kyrgyzstan-Kg
put some tages from key words: Adress/boys/girls/cityparts/family/some keyword. expample: #–¥–µ–≤—É—à–∫–∏ #–ø–æ–¥—Å–µ–ª–µ–Ω–∏–µ
Choose between based by context and be carefully!:
- üü°–ò—â—É –∫–≤–∞—Ä—Ç–∏—Ä—Éüü°
- üü¢–°–¥–∞—é –≤ –∞—Ä–µ–Ω–¥—Éüü¢
If message is not realated to "–ü–æ –∞—Ä–µ–Ω–¥—ã –∏ —Å–¥–∞—á–∏ –∫–≤–∞—Ä—Ç–∏—Ä / –∂–∏–ª—å–µ" - send a pure message   "False"
if the price has nnot detected, put "–î–æ–≥–æ–≤–æ—Ä"
"""
example ="""
Instance:

üü°–ò—â—É –∫–≤–∞—Ä—Ç–∏—Ä—Éüü° || üü¢–°–¥–∞—é –≤ –∞—Ä–µ–Ω–¥—Éüü¢

Please format the response as follows, ensuring each piece of information is on a new line:

üè†–¶–µ–Ω–∞:\n{info_here}\n
üìç–†–∞–π–æ–Ω:\n{info_here}\n
üìù–û–ø–∏—Å–∞–Ω–∏–µ:\n{info_here and other infos}\n
üìû–ö–æ–Ω—Ç–∞–∫—Ç—ã:\n{info_here_if_so}\n

\n
tags:

"""



client_op = Client()




@dp.message_handler(commands=['getid'])
async def send_chat_id(message: types.Message):
    chat_id = message.chat.id
    await message.reply(f"Chat ID: {chat_id}")



@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.reply("–í–∏–¥–µ–æ –≤–æ—Ç —Ç—É—Ç @renting_kg")



async def generate(user_content):
    global system_content,example,MODEL,PROVIDER
    response = client_op.chat.completions.create(
    model=MODEL,
    provider =PROVIDER,
    messages=[{"role": "user", "content": f"{system_content} {example}. Target: {user_content}"}],)
    generated_text = response.choices[0].message.content
 
    result = types.InlineQueryResultArticle(
                id='2',
               
                title="–ù–∞–∂–º–∏—Ç–µ —Å—é–¥–∞",
                description=f"{generated_text}",
                input_message_content=types.InputTextMessageContent(
                    message_text=f"{generated_text}",
#parse_mode='Markdown',
),
)
    return generated_text
        

@dp.inline_handler()
async def inline_youtube_handler(query: types.InlineQuery):
    user_input = query.query    
    if user_input:
        result = types.InlineQueryResultArticle(
            id='1',
            title=f"–ù–∞–ø–∏—à–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ {len(user_input)} –∏–∑ 250",
            description="–ï—Å–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏, –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–¥–∫–æ–Ω–µ—Ü <=",
            input_message_content=types.InputTextMessageContent(
                message_text=f"–í–Ω–∏–º–∞–Ω–∏–µ\n {user_input}"
            ),
        )
        
        if user_input.strip().endswith('<='):
            finish = await generate(user_input)
            await query.answer([finish], cache_time=1)
        else:
            await query.answer([result], cache_time=1)
        
    else:
        await query.answer([], switch_pm_text="–ö–∞–∫ –∏—Å–ø–æ–ª–∑—ã–≤–∞—Ç—å? –ñ–º–∏ —Å—é–¥–∞", switch_pm_parameter="start")










async def send_message(chat_id: int, text: str):
    await bot.send_message(chat_id, text)




# –í–∞—à–∏ API ID –∏ hash
api_id = 21643158
api_hash = '3af2df2f47d3cad630e183c8d56a0ea5'

with TelegramClient('name', api_id, api_hash) as client:
    # –ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–µ–±–µ
    client.send_message('me', 'Hello, myself!')

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    @client.on(events.NewMessage)
    async def handler(event):
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ (–≥—Ä—É–ø–ø–µ) –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
        chat = await event.get_chat()
        sender = await event.get_sender()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã
        if chat.id in TARGET_GROUPS and event.is_group and sender.bot == False and event.text:
            if event.text and chat.id ==1325827931:
               text = await generate(event.text)
               if text != 'False':
                  await send_message(-1002215579508,text)

    if __name__ == '__main__':
        executor.start_polling(dp, skip_updates=True)
        client.run_until_disconnected()

